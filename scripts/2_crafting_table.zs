/**** Debugging - something about this script prevents RecipesUpdatedEvent from firing, causing JEI and EMI lag ****/

/* Imports */

import crafttweaker.api.recipe.IRecipeManager;
import crafttweaker.api.recipe.type.Recipe;
import crafttweaker.api.recipe.type.CraftingRecipe;
import crafttweaker.api.recipe.type.ShapedRecipe;
import crafttweaker.api.recipe.type.ShapelessRecipe;

import crafttweaker.api.ingredient.IIngredient;

import crafttweaker.api.item.IItemStack;
import crafttweaker.api.item.ItemDefinition;

import crafttweaker.api.tag.type.KnownTag;
import crafttweaker.api.tag.MCTag;

import crafttweaker.api.resource.ResourceLocation;

import crafttweaker.api.recipe.MirrorAxis;

import crafttweaker.api.text.Component;
import crafttweaker.api.text.Message;

import crafttweaker.api.data.IData;

/* Objects */

// We create a custom object class so that additional functionality, e.g. specifying and automating replacements, can be done.

public class craftingRecipeExtended {
	
	// The recipe name is generated by the script, so we don't have to worry about setting it ourselves.
	
	public var name as string : get, set;
	
	// Type is set to one of four types - SHAPED, SHAPELESS, MIRRORED, or PATTERNED.
	// We combine the multiple types into one object to reduce redundancy in code.
	
	// If PATTERNED is specified, the user also passes a pattern as a string.
	// Current patterns are CAKE, CHEST_BOAT, ELEVATOR and SLEEPING_BAG.
	
	public var type as string : get, set;
	public var pattern as string : get, set;
	
	public var inputShaped as IIngredient[][] : get, set;
	public var inputShapeless as IIngredient[] : get, set;
	
	public var output as IItemStack : get, set;
	public var replace as bool : get, set;
	
	// Object creation for SHAPED and MIRRORED recipes
	
	public this(setType as string, setOutput as IItemStack, setReplace as bool, setInput as IIngredient[][]) {
		
		this.type = setType;
		this.output = setOutput;
		this.inputShaped = setInput;
		this.replace = setReplace;
		
	}
	
	// Object creation for SHAPELESS recipes
	
	public this(setType as string, setOutput as IItemStack, setReplace as bool, setInput as IIngredient[]) as craftingRecipeExtended {
		
		this.type = setType;
		this.output = setOutput;
		this.inputShapeless = setInput;
		this.replace = setReplace;
		
	}
	
	// Object creation for PATTERNED recipes
	
	public this(setType as string, setPattern as string, setOutput as IItemStack, setReplace as bool, setInput as IIngredient[]) {
		
		this.type = setType;
		this.pattern = setPattern;
		this.output = setOutput;
		this.inputShapeless = setInput;
		this.replace = setReplace;
		
	}
	
	public registerRecipe() as void {
		
		this.name = "ct_" + this.output.registryName.namespace + "_" + this.output.registryName.path;
		
		if (this.replace) {
		
			craftingTable.remove(this.output);
			
		}
		
		if (this.type == "PATTERNED") {
			
			switch (this.pattern) {
				case "CAKE": print("1"); break;
				case "CHEST_BOAT": print("2"); break;
				case "ELEVATOR": craftingTable.addShaped(this.name, this.output, [[this.inputShapeless[0], this.inputShapeless[0], this.inputShapeless[0]],[this.inputShapeless[0], <tag:items:forge:ender_pearls>, this.inputShapeless[0]], [this.inputShapeless[0], this.inputShapeless[0], this.inputShapeless[0]]]); break;
				case "SLEEPING_BAG": craftingTable.addShaped(this.name, this.output, [[<item:minecraft:air>, <item:minecraft:air>, <item:minecraft:air>], [this.inputShapeless[0], this.inputShapeless[0], this.inputShapeless[0]], [<item:minecraft:air>, <tag:items:forge:string>, <item:minecraft:air>]]); craftingTable.addShapeless(this.name + "_dye", this.output, [<tag:items:comforts:sleeping_bags>, this.inputShapeless[1]]); break;
			}
			
		} else {
			
			switch (this.type) {
				case "SHAPED": craftingTable.addShaped(this.name, this.output, this.inputShaped); break;
				case "SHAPELESS": craftingTable.addShapeless(this.name, this.output, this.inputShapeless); break;
				case "MIRRORED": craftingTable.addShapedMirrored(this.name, MirrorAxis.ALL, this.output, this.inputShaped); break;
			}
			
		}
		
	}
	
}

/* public class craftingRecipePatterned {
		
		if (this.pattern == "CAKE") {
			
			craftingTable.addShaped(this.name + "_vanilla", this.output, [[<tag:items:forge:milk>, <tag:items:forge:milk>, <tag:items:forge:milk>], [<item:minecraft:sugar>, this.inputSingle, <item:minecraft:sugar>], [<tag:items:forge:grain/wheat>, <tag:items:forge:grain/wheat>, <tag:items:forge:grain/wheat>]]);
			craftingTable.addShaped(this.name + "_dough", this.output, [[<item:minecraft:air>, <tag:items:forge:milk>, <item:minecraft:air>], [<item:minecraft:sugar>, this.inputSingle, <item:minecraft:sugar>,], [<item:minecraft:air>, <tag:items:forge:dough>, <item:minecraft:air>]]);
	
		} else if (this.pattern == "CHEST_BOAT") {
			
			craftingTable.addShaped(this.name + "_shaped", this.output, [[<item:minecraft:air>, <item:minecraft:air>, <item:minecraft:air>], [this.inputMultiple[0], <tag:items:forge:chests/wooden>, this.inputMultiple[0]], [this.inputMultiple[0], this.inputMultiple[0], this.inputMultiple[0]]]);
			craftingTable.addShapeless(this.name + "_shapeless", this.output, [<tag:items:forge:chests/wooden>, this.inputMultiple[1]]);
			
		}
		
	}
	
} */

/* Variables */

val standardPackRecipes as craftingRecipeExtended[] = [

	new craftingRecipeExtended("SHAPED", <item:create_connected:sequenced_pulse_generator>, true, [[<item:create:electron_tube>, <item:minecraft:clock>, <item:minecraft:air>], [<item:create:electron_tube>, <item:create:brass_sheet>, <item:minecraft:redstone_torch>], [<tag:items:forge:stone>, <tag:items:forge:stone>, <tag:items:forge:stone>]]),
	
	// Intergration - Make Twilight Forest's Final Castle bricks craftable with Moon Shards
	
	new craftingRecipeExtended("SHAPELESS", <item:twilightforest:castle_brick>, false, [<item:minecraft:stone_bricks>, <item:ppp_packtweaks:moon_shard>]),
	new craftingRecipeExtended("SHAPELESS", <item:tflostblocks:castle_brick_slab>, false, [<item:minecraft:stone_brick_slab>, <item:ppp_packtweaks:moon_shard>]),
	new craftingRecipeExtended("SHAPELESS", <item:twilightforest:castle_brick_stairs>, false, [<item:minecraft:stone_brick_stairs>, <item:ppp_packtweaks:moon_shard>]),
	new craftingRecipeExtended("SHAPELESS", <item:tflostblocks:castle_brick_wall>, false, [<item:minecraft:stone_brick_wall>, <item:ppp_packtweaks:moon_shard>]),

	new craftingRecipeExtended("SHAPELESS", <item:twilightforest:mossy_castle_brick>, false, [<item:minecraft:mossy_stone_bricks>, <item:ppp_packtweaks:moon_shard>]),
	new craftingRecipeExtended("SHAPELESS", <item:tflostblocks:mossy_castle_brick_slab>, false, [<item:minecraft:mossy_stone_brick_slab>, <item:ppp_packtweaks:moon_shard>]),
	new craftingRecipeExtended("SHAPELESS", <item:tflostblocks:mossy_castle_brick_wall>, false, [<item:minecraft:mossy_stone_brick_wall>, <item:ppp_packtweaks:moon_shard>]),
	new craftingRecipeExtended("SHAPELESS", <item:twilightforest:mossy_castle_brick_stairs>, false, [<item:minecraft:mossy_stone_brick_stairs>, <item:ppp_packtweaks:moon_shard>]),

	new craftingRecipeExtended("SHAPELESS", <item:tflostblocks:cracked_castle_brick_slab>, false, [<item:absentbydesign:slab_bricks_cracked>, <item:ppp_packtweaks:moon_shard>]),
	new craftingRecipeExtended("SHAPELESS", <item:twilightforest:cracked_castle_brick_stairs>, false, [<item:absentbydesign:stairs_bricks_cracked>, <item:ppp_packtweaks:moon_shard>]),
	new craftingRecipeExtended("SHAPELESS", <item:twilightforest:cracked_castle_brick>, false, [<item:minecraft:cracked_stone_bricks>, <item:ppp_packtweaks:moon_shard>]),
	new craftingRecipeExtended("SHAPELESS", <item:tflostblocks:cracked_castle_brick_wall>, false, [<item:absentbydesign:wall_stonebrick_cracked>, <item:ppp_packtweaks:moon_shard>]),
	
	// Intergration - Make Supplementaries's Cog Block be crafted with Create cogs
	
	new craftingRecipeExtended("SHAPED", <item:supplementaries:cog_block>, true, [[<tag:items:forge:ingots/copper>, <item:create:cogwheel>, <tag:items:forge:ingots/copper>], [<item:create:cogwheel>, <tag:items:forge:storage_blocks/redstone>, <item:create:cogwheel>], [<tag:items:forge:ingots/copper>, <item:create:cogwheel>, <tag:items:forge:ingots/copper>]]),
	
	// Progression - Make the Explorer's Compass a midgame item that requires some exploration to get, as a tradeoff for it's power
	
	new craftingRecipeExtended("SHAPED", <item:explorerscompass:explorerscompass>, true, [[<item:twilightforest:ironwood_ingot>, <tag:items:minecraft:stone_bricks>, <item:minecraft:netherite_ingot>], [<tag:items:minecraft:stone_bricks>, <item:minecraft:compass>, <tag:items:minecraft:stone_bricks>], [<item:deep_aether:stratus_ingot>, <tag:items:minecraft:stone_bricks>, <item:quark:diamond_heart>]]),
	
	// Progression - Cooking For Blockhead's Crafting Book requiring diamonds is a bit silly
	
	new craftingRecipeExtended("SHAPED", <item:cookingforblockheads:crafting_book>, true, [[<item:minecraft:air>, <tag:items:forge:ingots/iron>, <item:minecraft:air>], [<item:minecraft:crafting_table>, <item:cookingforblockheads:recipe_book>, <item:minecraft:crafting_table>], [<item:minecraft:air>, <tag:items:forge:ingots/iron>, <item:minecraft:air>]]),
	
	// Intergration - Make the Carved Bamboo Chimes require dried bamboo from Bamboo Everything
	
	new craftingRecipeExtended("SHAPED", <item:chimes:carved_bamboo_chimes>, true, [[<item:minecraft:air>, <item:minecraft:oak_slab>, <item:minecraft:air>], [<item:minecraft:air>, <tag:items:forge:string>, <item:minecraft:air>], [<item:minecraft:air>, <item:bambooeverything:dry_bamboo>, <item:minecraft:air>]]),
	
	// Intergration/Progression - Make Create's sheets possible to be crafted with a hammer, for easier progression
	
	new craftingRecipeExtended("SHAPELESS", <item:create:copper_sheet>, false, [ <item:minecraft:copper_ingot>, <tag:items:crafttweaker:hammers>.asIIngredient().anyDamage().transformDamage() ]),
	new craftingRecipeExtended("SHAPELESS", <item:create:brass_sheet>, false, [ <item:create:brass_ingot>, <tag:items:crafttweaker:hammers>.asIIngredient().anyDamage().transformDamage() ]),
	new craftingRecipeExtended("SHAPELESS", <item:create:iron_sheet>, false, [ <item:minecraft:iron_ingot>, <tag:items:crafttweaker:hammers>.asIIngredient().anyDamage().transformDamage() ]),
	new craftingRecipeExtended("SHAPELESS", <item:create:golden_sheet>, false, [ <item:minecraft:gold_ingot>, <tag:items:crafttweaker:hammers>.asIIngredient().anyDamage().transformDamage() ]),
	new craftingRecipeExtended("SHAPELESS", <item:cogsofcarminite:ironwood_sheet>, false, [ <tag:items:forge:ingots/ironwood>, <tag:items:crafttweaker:hammers>.asIIngredient().anyDamage().transformDamage()]),
	new craftingRecipeExtended("SHAPELESS", <item:cogsofcarminite:knightmetal_sheet>, false, [ <item:twilightforest:knightmetal_ingot>, <tag:items:crafttweaker:hammers>.asIIngredient().anyDamage().transformDamage()]),
	new craftingRecipeExtended("SHAPELESS", <item:cogsofcarminite:fiery_sheet>, false, [ <item:twilightforest:fiery_ingot>, <tag:items:crafttweaker:hammers>.asIIngredient().anyDamage().transformDamage()]),
	
	// Progression - Needing iron and redstone to craft a map is a little silly
	
	new craftingRecipeExtended("SHAPELESS", <item:minecraft:map>, true, [ <item:minecraft:ink_sac>, <tag:items:forge:paper>]),
	
	// Intergration - Make Create's dough --> slime ball recipe accept any lime dye
	
	new craftingRecipeExtended("SHAPELESS", <item:minecraft:slime_ball>, false, [ <tag:items:forge:dough>, <tag:items:forge:dyes/lime>]),
	
	// Intergration - Make the hammer a copper item and use rope to make item
	
	new craftingRecipeExtended("SHAPED", <item:justhammers:iron_impact_hammer>, true, [[<item:minecraft:air>, <item:minecraft:copper_block>, <tag:items:forge:ropes>], [<item:minecraft:air>, <tag:items:forge:rods/wooden>, <item:minecraft:copper_block>], [<tag:items:forge:rods/wooden>, <item:minecraft:air>, <item:minecraft:air>]]),
	
	// Progression - Wooden stairs/slabs/etc. are being moved to the Sawmill, so it needs to be obtainable without them
	
	new craftingRecipeExtended("SHAPED", <item:sawmill:sawmill>, true, [[<item:minecraft:air>, <item:minecraft:air>, <item:minecraft:air>], [<item:minecraft:air>, <tag:items:forge:ingots/iron>, <item:minecraft:air>], [<tag:items:minecraft:planks>, <tag:items:minecraft:planks>, <tag:items:minecraft:planks>]]),
	
	// Intergration - Accept any torch to craft various items that only accepted vanilla torches
	
	new craftingRecipeExtended("SHAPED", <item:minecraft:lantern>, true, [[<tag:items:forge:nuggets/iron>, <tag:items:forge:nuggets/iron>, <tag:items:forge:nuggets/iron>], [<tag:items:forge:nuggets/iron>, <tag:items:crafttweaker:torches>, <tag:items:forge:nuggets/iron>], [<tag:items:forge:nuggets/iron>, <tag:items:forge:nuggets/iron>, <tag:items:forge:nuggets/iron>]]),
	new craftingRecipeExtended("SHAPELESS", <item:minecraft:jack_o_lantern>, true, [<tag:items:crafttweaker:torches>, <item:minecraft:carved_pumpkin>]),
	new craftingRecipeExtended("SHAPED", <item:torchmaster:megatorch>, true, [[<tag:items:crafttweaker:torches>, <tag:items:crafttweaker:torches>, <tag:items:crafttweaker:torches>], [<tag:items:forge:gems/diamond>, <tag:items:minecraft:logs>, <tag:items:forge:gems/diamond>], [<item:minecraft:gold_block>, <tag:items:minecraft:logs>, <item:minecraft:gold_block>]]),
	new craftingRecipeExtended("SHAPED", <item:quark:stone_lamp>, true, [[<item:minecraft:stone>, <item:minecraft:stone>, <item:minecraft:stone>], [<item:minecraft:stone>, <tag:items:crafttweaker:torches>, <item:minecraft:stone>], [<item:minecraft:stone>, <item:minecraft:stone>, <item:minecraft:stone>]]),
	new craftingRecipeExtended("SHAPED", <item:quark:stone_brick_lamp>, true, [[<item:minecraft:stone_bricks>, <item:minecraft:stone_bricks>, <item:minecraft:stone_bricks>], [<item:minecraft:stone_bricks>, <tag:items:crafttweaker:torches>, <item:minecraft:stone_bricks>], [<item:minecraft:stone_bricks>, <item:minecraft:stone_bricks>, <item:minecraft:stone_bricks>]]),
	new craftingRecipeExtended("SHAPED", <item:supplementaries:sconce>, true, [[<item:minecraft:air>, <item:minecraft:air>, <item:minecraft:air>], [<tag:items:forge:nuggets/iron>, <tag:items:crafttweaker:torches>, <tag:items:forge:nuggets/iron>], [<item:minecraft:air>, <tag:items:forge:nuggets/iron>, <item:minecraft:air>]]),
	
	// Progression/Gamefeel - Make Wooden Shears require flint
	
	new craftingRecipeExtended("MIRRORED", <item:woodenshears:wshears_oak>, true,[[<item:minecraft:air>, <item:minecraft:flint>, <item:minecraft:air>],[<item:minecraft:flint>, <tag:items:forge:rods/wooden>, <item:minecraft:air>],[<item:minecraft:air>, <item:minecraft:air>, <item:minecraft:air>]]),

	// Intergration - Require Aether's Golden Pendant to craft Wither Storm's Amulet
	
	// Intergration - Add crafting recipes for the custom crates
	 
	new craftingRecipeExtended("SHAPELESS", <item:ppp_packtweaks:strawberry_crate>, true, [<item:mysticsbiomes:strawberry>, <item:mysticsbiomes:strawberry>, <item:mysticsbiomes:strawberry>, <item:mysticsbiomes:strawberry>, <item:mysticsbiomes:strawberry>, <item:mysticsbiomes:strawberry>, <item:mysticsbiomes:strawberry>, <item:mysticsbiomes:strawberry>, <item:mysticsbiomes:strawberry>]),
	new craftingRecipeExtended("SHAPELESS", <item:ppp_packtweaks:sweet_strawberry_crate>, true, [<item:mysticsbiomes:sweet_strawberry>, <item:mysticsbiomes:sweet_strawberry>, <item:mysticsbiomes:sweet_strawberry>, <item:mysticsbiomes:sweet_strawberry>, <item:mysticsbiomes:sweet_strawberry>, <item:mysticsbiomes:sweet_strawberry>, <item:mysticsbiomes:sweet_strawberry>, <item:mysticsbiomes:sweet_strawberry>, <item:mysticsbiomes:sweet_strawberry>]),
	new craftingRecipeExtended("SHAPELESS", <item:ppp_packtweaks:enchanted_berry_crate>, true, [<item:aether:enchanted_berry>, <item:aether:enchanted_berry>, <item:aether:enchanted_berry>, <item:aether:enchanted_berry>, <item:aether:enchanted_berry>, <item:aether:enchanted_berry>, <item:aether:enchanted_berry>, <item:aether:enchanted_berry>, <item:aether:enchanted_berry>]),
	new craftingRecipeExtended("SHAPELESS", <item:ppp_packtweaks:goldenleaf_berry_sack>, true, [<item:deep_aether:goldenleaf_berries>, <item:deep_aether:goldenleaf_berries>, <item:deep_aether:goldenleaf_berries>, <item:deep_aether:goldenleaf_berries>, <item:deep_aether:goldenleaf_berries>, <item:deep_aether:goldenleaf_berries>, <item:deep_aether:goldenleaf_berries>, <item:deep_aether:goldenleaf_berries>, <item:deep_aether:goldenleaf_berries>]),
	new craftingRecipeExtended("SHAPELESS", <item:ppp_packtweaks:enchanted_fruit_crate>, true, [<item:quark:ancient_fruit>, <item:quark:ancient_fruit>, <item:quark:ancient_fruit>, <item:quark:ancient_fruit>, <item:quark:ancient_fruit>, <item:quark:ancient_fruit>, <item:quark:ancient_fruit>, <item:quark:ancient_fruit>, <item:quark:ancient_fruit>]),
	
	// Misc that I still need to figure WTF I was thinking
	
	new craftingRecipeExtended("SHAPED", <item:ascended_quark:skyroot_chest>, true, [[<item:aether:skyroot_planks>, <item:aether:skyroot_planks>, <item:aether:skyroot_planks>], [<item:aether:skyroot_planks>, <item:minecraft:air>, <item:aether:skyroot_planks>], [<item:aether:skyroot_planks>, <item:aether:skyroot_planks>, <item:aether:skyroot_planks>]]),
	new craftingRecipeExtended("SHAPED", <item:supplementaries:wrench>, true, [[<item:minecraft:air>, <tag:items:forge:ingots/copper>, <item:minecraft:air>], [<item:minecraft:air>, <tag:items:forge:rods>, <tag:items:forge:ingots/copper>], [<tag:items:forge:rods>, <item:minecraft:air>, <item:minecraft:air>]]),
	new craftingRecipeExtended("SHAPELESS", <item:minecraft:glowstone_dust> * 4, false, [ <item:minecraft:glowstone> ]),
	new craftingRecipeExtended("SHAPELESS", <item:minecraft:amethyst_shard> * 4, false, [ <item:minecraft:amethyst_block> ]),
	new craftingRecipeExtended("SHAPED", <item:xercapaint:item_easel>, true, [[<item:minecraft:air>, <tag:items:forge:rods/wooden>, <item:minecraft:air>], [<tag:items:forge:rods/wooden>, <item:minecraft:air>, <tag:items:forge:rods/wooden>], [<tag:items:forge:rods/wooden>, <item:minecraft:air>, <tag:items:forge:rods/wooden>]]),
	new craftingRecipeExtended("SHAPELESS", <item:map_atlases:atlas>, false, [ <item:minecraft:book>, <tag:items:crafttweaker:maps>, <item:minecraft:compass>, <tag:items:crafttweaker:adhesives> ]),
	new craftingRecipeExtended("SHAPED", <item:ecologics:flowering_azalea_chest_boat>, false, [[<item:minecraft:air>, <item:minecraft:air>, <item:minecraft:air>], [<item:ecologics:flowering_azalea_planks>, <tag:items:forge:chests/wooden>, <item:ecologics:flowering_azalea_planks>], [<item:ecologics:flowering_azalea_planks>, <item:ecologics:flowering_azalea_planks>, <item:ecologics:flowering_azalea_planks>]]),
	
	// Intergration - Make Comfort's Sleeping Bags take any valid dye item
	
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_white>, false, [<item:minecraft:white_wool>, <tag:items:forge:dyes/white>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_orange>, false, [<item:minecraft:orange_wool>, <tag:items:forge:dyes/orange>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_magenta>, false, [<item:minecraft:magenta_wool>, <tag:items:forge:dyes/magenta>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_light_blue>, false, [<item:minecraft:light_blue_wool>, <tag:items:forge:dyes/light_blue>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_yellow>, false, [<item:minecraft:yellow_wool>, <tag:items:forge:dyes/yellow>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_lime>, false, [<item:minecraft:lime_wool>, <tag:items:forge:dyes/lime>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_pink>, false, [<item:minecraft:pink_wool>, <tag:items:forge:dyes/pink>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_gray>, false, [<item:minecraft:gray_wool>, <tag:items:forge:dyes/gray>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_light_gray>, false, [<item:minecraft:light_gray_wool>, <tag:items:forge:dyes/light_gray>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_cyan>, false, [<item:minecraft:cyan_wool>, <tag:items:forge:dyes/cyan>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_purple>, false, [<item:minecraft:purple_wool>, <tag:items:forge:dyes/purple>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_blue>, false, [<item:minecraft:blue_wool>, <tag:items:forge:dyes/blue>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_brown>, false, [<item:minecraft:brown_wool>, <tag:items:forge:dyes/brown>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_green>, false, [<item:minecraft:green_wool>, <tag:items:forge:dyes/green>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_red>, false, [<item:minecraft:red_wool>, <tag:items:forge:dyes/red>]),
	new craftingRecipeExtended("PATTERNED", "SLEEPING_BAG", <item:comforts:sleeping_bag_black>, false, [<item:minecraft:black_wool>, <tag:items:forge:dyes/black>]),
	
	// Intergration - Make Elevator Mod's Elevators take any valid ender pearl
	// Dye pattern already takes tags instead of the item, so we don't need to touch that
	
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_white>, true, [<item:minecraft:white_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_orange>, true, [<item:minecraft:orange_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_magenta>, true, [<item:minecraft:magenta_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_light_blue>, true, [<item:minecraft:light_blue_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_yellow>, true, [<item:minecraft:yellow_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_lime>, true, [<item:minecraft:lime_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_pink>, true, [<item:minecraft:pink_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_gray>, true, [<item:minecraft:gray_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_light_gray>, true, [<item:minecraft:light_gray_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_cyan>, true, [<item:minecraft:cyan_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_purple>, true, [<item:minecraft:purple_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_blue>, true, [<item:minecraft:blue_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_brown>, true, [<item:minecraft:brown_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_green>, true, [<item:minecraft:green_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_red>, true, [<item:minecraft:red_wool>]),
	new craftingRecipeExtended("PATTERNED", "ELEVATOR", <item:elevatorid:elevator_black>, true, [<item:minecraft:black_wool>])
	
	/*
	
	// Intergration - Make the Minecraft Cake take any valid egg
	
	new craftingRecipeExtended("CAKE", <item:minecraft:cake>, true, <tag:items:forge:eggs>),
	new craftingRecipeExtended("CHEST_BOAT", <item:mysticsbiomes:maple_chest_boat>, true, [<item:mysticsbiomes:maple_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:mysticsbiomes:jacaranda_chest_boat>, true, [<item:mysticsbiomes:jacaranda_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:mysticsbiomes:strawberry_chest_boat>, true, [<item:mysticsbiomes:strawberry_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:mysticsbiomes:strawberry_chest_boat>, true, []),
	new craftingRecipeExtended("CHEST_BOAT", <item:mysticsbiomes:peach_chest_boat>, true, []),
	new craftingRecipeExtended("CHEST_BOAT", <item:mysticsbiomes:sea_foam_chest_boat>, true, []),

	new craftingRecipeExtended("CHEST_BOAT", <item:ecologics:flowering_azalea_chest_boat>, true, [<item:ecologics:flowering_azalea_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:ecologics:azalea_chest_boat>, true, [<tag:items:crafttweaker:azalea_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:ecologics:walnut_chest_boat>, true, [<item:ecologics:walnut_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:ecologics:coconut_chest_boat>, true, [<item:ecologics:coconut_planks>]),
	
	new craftingRecipeExtended("CHEST_BOAT", <item:twilightforest:sorting_chest_boat>, true, [<item:twilightforest:sorting_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:twilightforest:mining_chest_boat>, true, [<item:twilightforest:mining_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:twilightforest:transformation_chest_boat>, true, [<item:twilightforest:transformation_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:twilightforest:time_chest_boat>, true, [<item:twilightforest:time_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:twilightforest:dark_chest_boat>, true, [<item:twilightforest:dark_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:twilightforest:mangrove_chest_boat>, true, [<item:minecraft:mangrove_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:twilightforest:canopy_chest_boat>, true, [<item:twilightforest:canopy_planks>]),
	new craftingRecipeExtended("CHEST_BOAT", <item:twilightforest:twilight_oak_chest_boat>, true, [<item:twilightforest:twilight_oak_planks>]), 
	
	new craftingRecipeExtended("CHEST_BOAT", <item:deep_aether:roseroot_chest_boat>, true, []),
	new craftingRecipeExtended("CHEST_BOAT", <item:deep_aether:yagroot_chest_boat>, true, []),
	new craftingRecipeExtended("CHEST_BOAT", <item:deep_aether:cruderoot_chest_boat>, true, []),
	new craftingRecipeExtended("CHEST_BOAT", <item:deep_aether:conberry_chest_boat>, true, []),
	new craftingRecipeExtended("CHEST_BOAT", <item:deep_aether:sunroot_chest_boat>, true, []),
	
	new craftingRecipeExtended("CHEST_BOAT", <item:aether:skyroot_chest_boat>, true, []),
	
	new craftingRecipeExtended("CHEST_BOAT", <item:upgrade_aquatic:driftwood_chest_boat>, true, []),
	new craftingRecipeExtended("CHEST_BOAT", <item:upgrade_aquatic:river_chest_boat>, true, []),
	
	new craftingRecipeExtended("CHEST_BOAT", <item:boatload:crimson_chest_boat>, true, []),
	new craftingRecipeExtended("CHEST_BOAT", <item:boatload:warped_chest_boat>, true, []),
	
	new craftingRecipeExtended("CHEST_BOAT", <item:fireproofboats:crimson_chest_boat>, true, []),
	new craftingRecipeExtended("CHEST_BOAT", <item:fireproofboats:warped_chest_boat>, true, []),
	
	new craftingRecipeExtended("CHEST_BOAT", <item:snifferplus:stone_pine_chest_boat>, true, []),
	new craftingRecipeExtended("CHEST_BOAT", <item:autumnity:maple_chest_boat>, true, []),
	
	*/
	
];

val recipeRemovalByName as string[] = [
	"absentbydesign:stripped_oak_wood",
	"absentbydesign:stripped_birch_wood",
	"absentbydesign:stripped_spruce_wood",
	"absentbydesign:stripped_jungle_wood",
	"absentbydesign:stripped_acacia_wood",
	"absentbydesign:stripped_dark_oak_wood",
	"create:crafting/appliances/slime_ball",
	"quark:tweaks/crafting/utility/misc/easy_sticks",
	"deep_aether:pumpkin_pie",
	"aether:skyroot_chest",
	"aether:skyroot_crafting_table"
];

val recipeRemovalByRegex as string[] = [
	"comforts:sleeping_bag_.*"
];

/* Main script */

for recipe in recipeRemovalByName {
	craftingTable.removeByName(recipe);
}

for recipe in recipeRemovalByRegex {
	craftingTable.removeByRegex(recipe);
}

for recipe in standardPackRecipes {
	recipe.registerRecipe();
}